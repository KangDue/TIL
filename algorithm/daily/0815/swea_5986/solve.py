import sys
sys.stdin = open('input.txt', encoding='utf-8')

# from itertools import combinations_with_replacement as cr
ans = [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 4, 2, 3, 2, 5, 2, 5, 3, 5, 3, 7, 3, 7, 2, 6, 3, 9, 2, 8, 4, 9, 4, 10, 2, 11, 3, 10, 4, 12, 3, 13, 4, 12, 5, 15, 4, 16, 3, 14, 5, 17, 3,
       16, 4, 16, 6, 19, 3, 21, 5, 20, 6, 20, 2, 22, 5, 21, 6, 22, 5, 28, 5, 24, 7, 25, 4, 29, 5, 27, 8, 29, 5, 33, 4, 29, 9, 33, 4, 35, 5, 34, 7, 30, 3, 38, 6, 36, 8, 35, 5, 43, 6, 38, 8, 37,
       6, 47, 7, 42, 10, 43, 6, 50, 6, 46, 12, 47, 4, 53, 5, 50, 10, 45, 3, 57, 7, 54, 9, 47, 6, 62, 5, 53, 8, 49, 7, 65, 8, 59, 11, 55, 6, 68, 5, 61, 12, 60, 4, 69, 8, 68, 11, 58, 5, 77, 8, 73,
       10, 60, 5, 78, 6, 69, 13, 65, 9, 89, 6, 75, 11, 69, 7, 86, 7, 80, 14, 75, 6, 92, 8, 90, 13, 74, 5, 95, 8, 91, 11, 73, 7, 102, 9, 93, 13, 82, 8, 107, 9, 95, 14, 85, 7, 110, 7, 100, 19, 95,
       6, 116, 8, 111, 13, 88, 7, 122, 9, 115, 11, 90, 7, 125, 7, 114, 12, 94, 9, 130, 7, 111, 15, 102, 9, 132, 9, 124, 18, 109, 8, 134, 9, 134, 16, 108, 6, 142, 9, 137, 16, 108, 9, 154, 8, 136,
       14, 111, 10, 154, 9, 139, 16, 120, 8, 157, 9, 149, 19, 127, 7, 158, 11, 160, 16, 122, 7, 171, 14, 166, 16, 129, 8, 176, 12, 161, 17, 134, 10, 186, 8, 159, 19, 143, 8, 187, 11, 171, 21,
       146, 9, 190, 10, 187, 15, 143, 8, 198, 12, 190, 17, 146, 9, 210, 10, 187, 15, 151, 11, 210, 11, 186, 20, 161, 7, 207, 10, 197, 24, 167, 6, 213, 11, 207, 19, 161, 9, 234, 13, 216, 17, 162,
       10, 237, 9, 211, 16, 170, 13, 244, 10, 210, 20, 180, 9, 240, 10, 225, 22, 182, 8, 238, 14, 239, 18, 183, 8, 254, 14, 241, 18, 181, 10, 267, 11, 231, 22, 195, 13, 278, 10, 234, 19, 200,
       12, 269, 9, 255, 27, 209, 11, 271, 11, 270, 21, 200, 7, 287, 14, 273, 17, 197, 11, 294, 13, 270, 20, 215, 13, 300, 11, 260, 21, 222, 10, 297, 11, 278, 30, 231, 11, 304, 12, 298, 21, 220,
       9, 318, 14, 305, 19, 219, 13, 336, 11, 299, 21, 229, 14, 336, 13, 290, 21, 245, 12, 330, 13, 318, 27, 258, 12, 321, 12, 328, 24, 247, 9, 352, 16, 334, 28, 250, 12, 369, 13, 330, 24, 260,
       15, 373, 13, 330, 23, 267, 14, 377, 11, 352, 29, 275, 11, 362, 14, 367, 23, 269, 9, 388, 19, 380, 22, 268, 13, 394, 13, 362, 23, 283, 13, 408, 15, 357, 27, 294, 15, 412, 14, 374, 32, 311,
       11, 400, 14, 402, 23, 293, 11, 430, 17, 410, 24, 291, 11, 440, 15, 399, 25, 309, 14, 442, 17, 395, 22, 319, 13, 434, 14, 412, 30, 332, 10, 434, 13, 426, 30, 326, 11, 467, 19, 437, 23, 313,
       11, 476, 11, 428, 23, 328, 18, 484, 14, 423, 24, 337, 13, 483, 13, 443, 31, 355, 11, 463, 16, 466, 26, 346, 12, 489, 19, 472, 25, 337, 12, 505, 13, 462, 29, 360, 16, 522, 15, 442, 27,366,
       12, 515, 15, 478, 32, 377, 12, 505, 14, 501, 27, 363, 13, 537, 20, 508, 26, 359, 15, 547, 19, 510, 26, 387, 18, 547, 17, 486, 31, 396, 12, 557, 16, 514, 41, 417, 10, 550, 14, 531, 28,
       393, 15, 583, 18, 546, 25, 386, 17, 597, 16, 542, 27, 406, 21, 604, 15, 523, 29, 426, 13, 597, 19, 565, 41, 440, 14, 574, 16, 585, 31, 426, 11, 616, 21, 589, 33, 418, 15, 646, 17, 572,28,
       443, 21, 650, 16, 561, 30, 456, 16, 651, 16, 605, 39, 459, 11, 624, 19, 628, 30, 454, 14, 667, 24, 644, 31, 444, 18, 674, 19, 623, 24, 468, 16, 693, 17, 585, 37, 500, 14, 694, 15, 631,
       39, 498, 14, 669, 15, 664, 31, 479, 15, 713, 21, 683, 31, 460, 15, 727, 19, 662, 29, 496, 18, 740, 19, 640, 31, 516, 18, 718, 19, 678, 39, 526, 14, 706, 17, 702, 35, 523, 15, 759, 21, 706,
       30, 504, 17, 768, 17, 701, 31, 522, 26, 798, 18, 682, 32, 547, 16, 777, 15, 714, 44, 558, 14, 745, 18, 762, 30, 547, 15, 778, 22, 758, 34, 524, 17, 810, 14, 742, 38, 567, 21, 832, 16,
       705, 32, 574, 16, 821, 14, 772, 39, 578, 18, 789, 20, 801, 34, 564, 17, 845, 20, 801, 29, 546, 16, 848, 21, 795, 34, 589, 22, 855, 22, 762, 33, 601, 18, 863, 17, 810, 51, 633, 18, 840, 17,
       825, 32, 605, 15, 889, 25, 858, 31, 584, 20, 910, 19, 842, 39, 619, 18, 918, 17, 796, 33, 627, 17, 911, 21, 865, 46, 657, 18, 856, 19, 893, 36, 638, 14, 933, 25, 891, 39, 627, 21, 968,
       18, 864, 37, 651, 23, 971, 19, 860, 34, 666, 20, 974, 19, 917, 48, 675, 15, 924, 17, 930, 34, 660, 15, 989, 31, 945, 31, 647, 20, 988, 18, 923, 35, 689, 23, 1007, 20, 890, 47, 715, 18, 1034,
       18, 941, 43, 716, 17, 959, 20, 988, 36, 700, 18, 1047, 24, 1002, 34, 669, 18, 1054, 20, 956, 33, 717, 25, 1060, 23, 946, 37, 738, 19, 1033, 22, 998, 45, 755, 16, 1012, 18, 1029, 45,744,
       17, 1097, 27, 1017, 32, 701, 17, 1105, 19, 1009, 35, 758, 26, 1112, 17, 976, 39, 756, 20, 1109, 23, 1036, 52, 790, 13, 1056, 25, 1095, 37, 769]
a = []
for t in range(int(input())):
    n = int(input())
    a.append(f'#{t} {ans[n]}')
print(*a,sep='\n')



# for i in range(2,1001):
#     if prime[i]:
#         primes.append(i)
#     for j in range(2*i,1001,i):
#         prime[j] = False
# lp = len(primes)

# for t in range(int(input())):
#     n = int(input())
#     for i in range(lp):
#         if primes[i] > n:
#             temp = primes[:i]
#             break
#     count = 0
#     for i in cr(primes,3): # 3개까지 중복 허용
#         if sum(i) == n:
#             count += 1
#         elif i[0]*3 > n: # 쓸데없는 계산 줄이기
#             break
#     print(f'#{t+1} {count}')

"""신박한 참고코드
from collections import defaultdict
def find_prime(num):
    if num%2 == 0 or num%3==0:
        return
    for i in range(5,int(num**(0.5))+1):
        if num%i == 0:
            return
    nums.append(num)
    return
 
r = []
nums = [2,3]
for i in range(5,1000):
    find_prime(i)
 
d = defaultdict(int)
k = len(nums)
for i in range(k): #여기가 신박해
    for j in range(i, k):
        for l in range(j, k):
            d[nums[i] + nums[j] + nums[l]] += 1
 
for tc in range(int(input())): 
    n = int(input())
    r.append("#{} {}".format(tc+1,d[n]))
print("\n".join(r))
"""